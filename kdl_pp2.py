# -*- coding: utf-8 -*-
"""KDL_pp2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MCG1VoISql2LCr2ehXLcViikgOqVcXXI
"""



#aqui a gente cria um DateFrame* vazio com as colunas que a gente quer

tabela_kdl = pd.DataFrame(columns=["Artigo Científico","Autor","Ano de Publicação","Modelo","Métrica","Resultado" ])

#artigo 1 = todos os links estão no grupo do projeto

dados_rf = [

{"Artigo Científico:": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
 "Autor": "Ahmed et al.",
 "Ano de Publicação": "2024",
 "Modelo": "RF",
 "Métrica": "Accuracy",
 "Resultado": 0.796},

 {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
 "Autor": "Ahmed et al.",
 "Ano de Publicação": "2024",
 "Modelo": "RF",
 "Métrica": "Precision",
 "Resultado": 0.816},


 {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
 "Autor": "Ahmed et al.",
 "Ano de Publicação": "2024",
 "Modelo": "RF",
 "Métrica": "Recall",
 "Resultado": 0.878},

 {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
 "Autor": "Ahmed et al.",
 "Ano de Publicação": "2024",
 "Modelo": "RF",
 "Métrica": "F1-Score",
 "Resultado": 0.846}

]


import pandas as pd
tabela_kdl = pd.DataFrame(dados_rf)
tabela_kdl

dados_nb = [
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": "2024",
     "Modelo": "Naïve Bayes",
     "Métrica": "Accuracy",
     "Resultado": 0.771},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": "2024",
     "Modelo": "Naïve Bayes",
     "Métrica": "Precision",
     "Resultado": 0.794},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": "2024",
     "Modelo": "Naïve Bayes",
     "Métrica": "Recall",
     "Resultado": 0.864},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": "2024",
     "Modelo": "Naïve Bayes",
     "Métrica": "F1-Score",
     "Resultado": 0.828}
]

tabela_kdl = pd.concat([tabela_kdl, pd.DataFrame(dados_nb)], ignore_index=True)
tabela_kdl

dados_lr = [
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": "2024",
     "Modelo": "Logistic Regression",
     "Métrica": "Accuracy",
     "Resultado": 0.705},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": "2024",
     "Modelo": "Logistic Regression",
     "Métrica": "Precision",
     "Resultado": 0.765},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": "2024",
     "Modelo": "Logistic Regression",
     "Métrica": "Recall",
     "Resultado": 0.776},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": "2024",
     "Modelo": "Logistic Regression",
     "Métrica": "F1-Score",
     "Resultado": 0.770}
]


tabela_kdl = pd.concat([tabela_kdl, pd.DataFrame(dados_lr)], ignore_index=True)
tabela_kdl

dados_dt = [
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": 2024,
     "Modelo": "Decision Tree",
     "Métrica": "Accuracy",
     "Resultado": 0.718},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": 2024,
     "Modelo": "Decision Tree",
     "Métrica": "Precision",
     "Resultado": 0.763},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": 2024,
     "Modelo": "Decision Tree",
     "Métrica": "Recall",
     "Resultado": 0.810},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": 2024,
     "Modelo": "Decision Tree",
     "Métrica": "F1-Score",
     "Resultado": 0.786},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": 2024,
     "Modelo": "Decision Tree",
     "Métrica": "AUC",
     "Resultado": 0.69},
    {"Artigo Científico": "ML Algorithm-Based Prediction of Diabetes Among Female Population Using PIMA Dataset",
     "Autor": "Ahmed et al.",
     "Ano de Publicação": 2024,
     "Modelo": "Decision Tree",
     "Métrica": "CV Accuracy",
     "Resultado": 0.72}
]

tabela_kdl = pd.concat([tabela_kdl, pd.DataFrame(dados_dt)], ignore_index=True)
tabela_kdl

# artigo 2
tabela_kdl2 = pd.DataFrame(columns=[
    "Artigo Científico","Autor","Ano de Publicação","Modelo","Métrica","Resultado"])

dados2 = [
    {"Artigo Científico": "Comparison of Machine Learning Models for Predicting Type 2 Diabetes Risk Using the Pima Indians Diabetes Dataset",
     "Autor": "Zhengyi Zhang",
     "Ano de Publicação": 2025,
     "Modelo": "XGBoost",
     "Métrica": "Accuracy",
     "Resultado": 0.85},
    {"Artigo Científico": "Comparison of Machine Learning Models for Predicting Type 2 Diabetes Risk Using the Pima Indians Diabetes Dataset",
     "Autor": "Zhengyi Zhang",
     "Ano de Publicação": 2025,
     "Modelo": "XGBoost",
     "Métrica": "Recall",
     "Resultado": 0.79},
    {"Artigo Científico": "Comparison of Machine Learning Models for Predicting Type 2 Diabetes Risk Using the Pima Indians Diabetes Dataset",
     "Autor": "Zhengyi Zhang",
     "Ano de Publicação": 2025,
     "Modelo": "XGBoost",
     "Métrica": "AUC",
     "Resultado": 0.91}
]


import pandas as pd
tabela_kdl2 = pd.DataFrame(dados2)
tabela_kdl2

tabela_kdl3 = pd.DataFrame(columns=[ "Artigo Científico","Autor","Ano de Publicação","Modelo","Métrica","Resultado" ])


dados3 = [

    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "LightGBM",
     "Métrica": "Accuracy",
     "Resultado": 0.8896},
    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "LightGBM",
     "Métrica": "Precision",
     "Resultado": 0.8491},
    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "LightGBM",
     "Métrica": "Recall",
     "Resultado": 0.8333},
    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "LightGBM",
     "Métrica": "AUC",
     "Resultado": 0.9472},


    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "XGBoost",
     "Métrica": "Accuracy",
     "Resultado": 0.8831},
    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "XGBoost",
     "Métrica": "AUC",
     "Resultado": 0.9463},


    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "Gradient Boosting",
     "Métrica": "Accuracy",
     "Resultado": 0.8766},
    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "Gradient Boosting",
     "Métrica": "AUC",
     "Resultado": 0.9557},

    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "Random Forest",
     "Métrica": "Accuracy",
     "Resultado": 0.8506},

    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "SVM",
     "Métrica": "Accuracy",
     "Resultado": 0.8377},

    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "KNN",
     "Métrica": "Accuracy",
     "Resultado": 0.8312},

    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "Decision Tree",
     "Métrica": "Accuracy",
     "Resultado": 0.8182},


    {"Artigo Científico": "Diabetes Prediction on Pima Indians Dataset Using Machine Learning Techniques",
     "Autor": "Ali et al.",
     "Ano de Publicação": 2025,
     "Modelo": "Logistic Regression",
     "Métrica": "Accuracy",
     "Resultado": 0.7922},
]


import pandas as pd
tabela_kdl3 = pd.DataFrame(dados3)
tabela_kdl3

import pandas as pd
from google.colab import files


colunas_padrao = ["Artigo Científico","Autor","Ano de Publicação","Modelo","Métrica","Resultado"]

tabela_kdl = tabela_kdl[colunas_padrao]
tabela_kdl2 = tabela_kdl2[colunas_padrao]
tabela_kdl3 = tabela_kdl3[colunas_padrao]

tabela_geral = pd.concat([tabela_kdl, tabela_kdl2, tabela_kdl3], ignore_index=True)

tabela_geral.to_csv("tabela_geral.csv", index=False)


files.download("tabela_geral.csv")

#início do nosso experimento

import pandas as pd
from sklearn.model_selection import train_test_split

from google.colab import files
import pandas as pd

uploaded = files.upload()

df = pd.read_csv("diabetes.csv")
df.head()

print("PRIMEIRAS LINHAS DO DATASET:")
print(df.head())

print("\nINFORMÇÕES DO DATASET:")
print(df.info())

x = df.drop("Outcome", axis=1) #todas as colunas menos a que saí como respostas
y = df["Outcome"] #colunas que pretendemos prever

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42) #isso é pra dividir em treino e teste


print(f"\nTamanho do treino: {x_train.shape[0]} amostras")
print(f"Tamanho do teste: {x_test.shape[0]} amostras")


#coloquem para rodar só esse bloco e selecionem o arquivo diabetes.csv
#cada linha é uma paciente e cada coluna é uma característica (feature) ou o resultado (outcome)

#pra ajudar vocês:
  #Pregnancies: número de gestações
  #Glucose: nível de glicose no sangue
  #BloodPressure: pressão arterial
  #SkinThickness: espessura da pele
  #Insulin: nível de insulina
  #BMI: índice de massa corporal
  #DiabetesPedigreeFunction: histórico familiar/genético
  #Age: idade
  #Outcome: 0 = esaa pessoa não é diabético, 1 = essa pessoa é diabético (target que vamos prever)

  #informações gerais que é o que chamamos lá em cima de df.info
  #768 ENTRIES: o dataset tem 768 pacientes
  #9 columns: 9 colunas/features (já expliquei oq era lá em cima)
  #Non-Null Count: todas as colunas estão completas, ou seja, não tem nenhum valor em branco
  #dtypes: são os tipos de dados (D = data; type = tipos), int64 (inteiros) e float64 (decimais), é 64 por convenção e porque é aquilo de potência base 2


  #tamanho do treino/teste: conjunto usado para o ML aprender (treino) e avaliar modelo depois (teste)


#TESTANDO OS MODELOS

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score


#aqui vocês criam os modelos
modelos = {
    "Logistic Regression": LogisticRegression(max_iter=500),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "KNN": KNeighborsClassifier()
}


resultados = {} #esse é o dicionário onde os resultados são armazenados

#aqui a gente treina e testa os modelos separadamente

for nome, modelo in modelos.items():
  modelo.fit(x_train, y_train)
  y_pred = modelo.predict(x_test)

  acc = accuracy_score(y_test, y_pred)
  prec = precision_score(y_test, y_pred)
  rec = recall_score(y_test, y_pred)
  f1 = f1_score(y_test, y_pred)

  resultados[nome] = {
        "Accuracy": round(acc, 3),
        "Precision": round(prec, 3),
        "Recall": round(rec, 3),
        "F1-Score": round(f1, 3) }

#imprimindo os resultados organizados para facilitar na aplicação do FLASK
tabela_resultados = pd.DataFrame(resultados).T
print("\nRESULTADOS DOS MODELOS:")
print(tabela_resultados)

#QUANDO IMPRIMIR ESSE BLOCO...
#vai aparecer os valores das métricas:

  #Accuracy: porcentagem total de acertos; quanto maior, melhor!
  #Precision: quando o modelo diz que é diabete, quantos realmente são?; evita falsos positivos
  #Recall; dos que REALMENTE tem diabetes, quantos a máquina identificou?; evita falsos negativos
  #F1: média entre precision e recall; é o equilíbrio

#de acordo com os resultados, o RF foi o melhor no experimento inicial, porém o DT e o KNN foram menos precisos/fracos

#a partir daqui a gente vai criar os gráficos do artigo
#todos esses códigos tem no prática assistida 2 (no classroom) de como mointar e analisar cada

import seaborn as sns
import matplotlib.pyplot as plt

#calculando a correlação
correlacoes = df.corr()

#gráfico de calor das correlações
plt.figure(figsize=(16,6))
sns.heatmap(correlacoes, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)

plt.title("MAPA DE CALOR DAS CORRELAÇÕES - Dataset Diabetes", fontsize=14)
plt.show()


#gráfico de relação entre características
import plotly.express as px
fig = px.scatter(df, x='Glucose', y='BMI', color='Outcome',
                labels={'Glucose':'Glicose', 'BMI':'IMC', 'Outcome':'Diabetes'},
                title = "DISTRIBUIÇÃO DE GLUCOSE x BMI")
fig.show()


#gráfico de blocos e linhas (para analisar variáveis)
import plotly.figure_factory as ff

# Separando os dados por Outcome
diabetes_bmi = df[df['Outcome'] == 1]['BMI']
sem_diabetes_bmi = df[df['Outcome'] == 0]['BMI']
labels = ['Diabetes', 'Sem Diabetes']

# criando o gráfico em si
fig = ff.create_distplot([diabetes_bmi, sem_diabetes_bmi],
                         group_labels=labels,
                         bin_size=1,  # você pode ajustar o tamanho do bin
                         show_rug=False) #opcional
fig.update_layout(title="Distribuição do BMI entre Pessoas com e sem Diabetes",
                  xaxis_title="BMI",
                  yaxis_title="Densidade")
fig.show()



#esse daqui é tipo um geralzão que mostra a média, e os pontos que estão perto e longes dessa média
import plotly.express as px

fig = px.box(df, y='BMI', points="all",  # points="all" mostra todos os pontos, incluindo outliers
             title="Boxplot do BMI - Identificando Outliers",
             labels={'BMI':'Índice de Massa Corporal'})

fig.show()
fig = px.box(df, x='Outcome', y='BMI', points="all",
             labels={'Outcome':'Diabetes (0=Não, 1=Sim)', 'BMI':'Índice de Massa Corporal'},
             title="Boxplot de BMI por Diabetes")
fig.show()

#aqui vamos salvar o melhor modelo (RF), e usá-lo na aplicação flask (vou usar o VS code)

import joblib

melhor_modelo = modelos['Random Forest']

joblib.dump(melhor_modelo, "model.pkl")

files.download("model.pkl")

import pandas as pd

dados = {
    "Projeto 3UNI": [
        "KDL GlucoClinic (DT)",
        "MDPI (RF)",
        "PARADIGM PRESS (XGBoost)",
        "THE ASPD (LightGBM)"
    ],

    "Accuracy (%)": [73.4, 79.6, 85.02, 88.9],
    "Precision (%)": [63.5, 81.6, 84.9, 84.9],
    "Recall (%)": [72.7, 87.8, 79.01, 83.33],
    "F1-Score (%)": [67.8, 84.6, 90.1, 94.72]
}

comparar = pd.DataFrame(dados)
comparar